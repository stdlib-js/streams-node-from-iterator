{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/debug.js","../lib/main.js","../lib/object_mode.js","../lib/factory.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport { isPrimitive as isNonNegative } from '@stdlib/assert-is-nonnegative-number';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport isFunction from '@stdlib/assert-is-function';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before pausing iteration\n* @param {Function} [options.serialize] - custom serialization function\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'serialize' ) ) {\n\t\topts.serialize = options.serialize;\n\t\tif ( !isFunction( opts.serialize ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a function. Option: `%s`.', 'serialize', opts.serialize ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'from-iterator-stream' );\n\n\n// EXPORTS //\n\nexport default debug;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport isError from '@stdlib/assert-is-error';\nimport isBuffer from '@stdlib/assert-is-buffer';\nimport assign from '@stdlib/object-assign';\nimport inherit from '@stdlib/utils-inherit';\nimport setNonEnumerable from '@stdlib/utils-define-nonenumerable-property';\nimport setNonEnumerableReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport string2buffer from '@stdlib/buffer-from-string';\nimport Buffer from '@stdlib/buffer-ctor'; // TODO: replace Buffer.concat usage with stdlib pkg\nimport nextTick from '@stdlib/utils-next-tick';\nimport format from '@stdlib/string-format';\nimport DEFAULTS from './defaults.json';\nimport validate from './validate.js';\nimport debug from './debug.js';\n\n\n// FUNCTIONS //\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar err;\n\tvar v;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tv = this._iterator.next();\n\t\tthis._i += 1;\n\t\tif ( v.done ) {\n\t\t\tif ( hasOwnProp( v, 'value' ) ) {\n\t\t\t\tv = v.value;\n\t\t\t\tdebug( 'Value: %s. Iter: %d.', JSON.stringify( v ), this._i );\n\t\t\t\tif ( this._objectMode === false ) {\n\t\t\t\t\tv = this._serialize( v );\n\t\t\t\t\tif ( typeof v === 'string' ) {\n\t\t\t\t\t\tif ( this._i === 1 ) { // eslint-disable-line max-depth\n\t\t\t\t\t\t\tv = string2buffer( v );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tv = string2buffer( this._sep+v );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.push( v );\n\t\t\t\t\t} else if ( isBuffer( v ) ) {\n\t\t\t\t\t\tif ( this._i > 1 ) { // eslint-disable-line max-depth\n\t\t\t\t\t\t\tv = Buffer.concat( [ string2buffer( this._sep ), v ] ); // eslint-disable-line max-len\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.push( v );\n\t\t\t\t\t} else {\n\t\t\t\t\t\terr = new Error( format( 'invalid operation. Serialization function must return a string or Buffer. Value: `%s`.', v ) );\n\t\t\t\t\t\tthis.emit( 'error', err );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tdebug( 'Finished iteration.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tv = v.value;\n\t\tdebug( 'Value: %s. Iter: %d.', JSON.stringify( v ), this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tv = this._serialize( v );\n\t\t\tif ( typeof v === 'string' ) {\n\t\t\t\tif ( this._i === 1 ) {\n\t\t\t\t\tv = string2buffer( v );\n\t\t\t\t} else {\n\t\t\t\t\tv = string2buffer( this._sep+v );\n\t\t\t\t}\n\t\t\t} else if ( isBuffer( v ) ) {\n\t\t\t\tif ( this._i > 1 ) {\n\t\t\t\t\tv = Buffer.concat( [ string2buffer( this._sep ), v ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\terr = new Error( format( 'invalid operation. Serialization function must return a string or Buffer. Value: `%s`.', v ) );\n\t\t\t\tthis.emit( 'error', err );\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( v );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {IteratorStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a readable stream from an iterator.\n*\n* @constructor\n* @param {Iterator} iterator - source iterator\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before pausing iteration\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {Function} [options.serialize] - custom serialization function\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {IteratorStream} Stream instance\n*\n* @example\n* import inspectStream from '@stdlib/streams-node-inspect-sink';\n* import randu from '@stdlib/random-iter-randu';\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new IteratorStream( randu( opts ) );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction IteratorStream( iterator, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof IteratorStream ) ) {\n\t\tif ( arguments.length > 1 ) {\n\t\t\treturn new IteratorStream( iterator, options );\n\t\t}\n\t\treturn new IteratorStream( iterator );\n\t}\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an iterator. Value: `%s`.', iterator ) );\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Define the serialization function:\n\tsetNonEnumerableReadOnly( this, '_serialize', opts.serialize || JSON.stringify );\n\n\t// Cache the iterator:\n\tsetNonEnumerableReadOnly( this, '_iterator', iterator );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( IteratorStream, Readable );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof IteratorStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( IteratorStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof IteratorStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {IteratorStream} Stream instance\n*/\nsetNonEnumerableReadOnly( IteratorStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nexport default IteratorStream;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object';\nimport format from '@stdlib/string-format';\nimport assign from '@stdlib/object-assign';\nimport IteratorStream from './main.js';\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream from an iterator.\n*\n* @param {Iterator} iterator - source iterator\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before pausing iteration\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {IteratorStream} Stream instance\n*\n* @example\n* import randu from '@stdlib/random-iter-randu';\n* import inspectStream from '@stdlib/streams-node-inspect-sink';\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( randu( opts ) );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( iterator, options ) {\n\tvar opts;\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new IteratorStream( iterator, opts );\n}\n\n\n// EXPORTS //\n\nexport default objectMode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport assign from '@stdlib/object-assign';\nimport IteratorStream from './main.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams from iterators.\n*\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before pausing iteration\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {Function} [options.serialize] - custom serialization function\n* @returns {Function} stream factory\n*\n* @example\n* import randu from '@stdlib/random-iter-randu';\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( randu() ) );\n* }\n*/\nfunction factory( options ) {\n\tvar opts;\n\tif ( arguments.length ) {\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\treturn createStream;\n\n\t/**\n\t* Returns a readable stream from an iterator.\n\t*\n\t* @private\n\t* @param {Iterator} iterator - source iterator\n\t* @throws {TypeError} must provide an iterator\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {IteratorStream} Stream instance\n\t*/\n\tfunction createStream( iterator ) {\n\t\treturn new IteratorStream( iterator, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream from an iterator.\n*\n* @module @stdlib/streams-node-from-iterator\n*\n* @example\n* import inspectStream from '@stdlib/streams-node-inspect-sink';\n* import randu from '@stdlib/random-iter-randu';\n* import iteratorStream from '@stdlib/streams-node-from-iterator';\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = iteratorStream( randu( opts ) );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* import randu from '@stdlib/random-iter-randu';\n* import iteratorStream from '@stdlib/streams-node-from-iterator';\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = iteratorStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( randu() ) );\n* }\n*\n* @example\n* import inspectStream from '@stdlib/streams-node-inspect-sink';\n* import randu from '@stdlib/random-iter-randu';\n* import iteratorStream from '@stdlib/streams-node-from-iterator';\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = iteratorStream.objectMode( randu( opts ) );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport objectMode from './object_mode.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["validate","opts","options","isObject","hasOwnProp","sep","isString","TypeError","format","objectMode","isBoolean","encoding","highWaterMark","isNonNegative","serialize","isFunction","debug","logger","Readable","require$$0","IteratorStream","iterator","err","this","arguments","length","isIteratorLike","assign","DEFAULTS","JSON","stringify","call","setNonEnumerable","setNonEnumerableReadOnly","factory","createStream","inherit","prototype","FLG","v","_destroyed","_iterator","next","_i","done","value","_objectMode","_serialize","string2buffer","_sep","push","isBuffer","Buffer","concat","Error","emit","error","self","nextTick","isError","message","setReadOnly","main"],"mappings":"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"}