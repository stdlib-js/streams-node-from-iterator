{"version":3,"file":"index.mjs","sources":["../node_modules/readable-stream/readable.js","../lib/validate.js","../node_modules/debug/src/index.js","../lib/debug.js","../lib/main.js","../lib/object_mode.js","../lib/factory.js","../lib/index.js"],"sourcesContent":["var Stream = require('stream');\nif (process.env.READABLE_STREAM === 'disable' && Stream) {\n  module.exports = Stream;\n  exports = module.exports = Stream.Readable;\n  exports.Readable = Stream.Readable;\n  exports.Writable = Stream.Writable;\n  exports.Duplex = Stream.Duplex;\n  exports.Transform = Stream.Transform;\n  exports.PassThrough = Stream.PassThrough;\n  exports.Stream = Stream;\n} else {\n  exports = module.exports = require('./lib/_stream_readable.js');\n  exports.Stream = Stream || exports;\n  exports.Readable = exports;\n  exports.Writable = require('./lib/_stream_writable.js');\n  exports.Duplex = require('./lib/_stream_duplex.js');\n  exports.Transform = require('./lib/_stream_transform.js');\n  exports.PassThrough = require('./lib/_stream_passthrough.js');\n}\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert-is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.sep] - separator used to join streamed data\n* @param {boolean} [options.objectMode] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in the internal buffer before pausing iteration\n* @param {Function} [options.serialize] - custom serialization function\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) && opts.encoding !== null ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string or null. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'serialize' ) ) {\n\t\topts.serialize = options.serialize;\n\t\tif ( !isFunction( opts.serialize ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a function. Option: `%s`.', 'serialize', opts.serialize ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n * Detect Electron renderer process, which is node, but we should\n * treat as a browser.\n */\n\nif (typeof process !== 'undefined' && process.type === 'renderer') {\n  module.exports = require('./browser.js');\n} else {\n  module.exports = require('./node.js');\n}\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'from-iterator-stream' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Readable = require( 'readable-stream' ).Readable;\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar isBuffer = require( '@stdlib/assert-is-buffer' );\nvar copy = require( '@stdlib/utils-copy' );\nvar inherit = require( '@stdlib/utils-inherit' );\nvar setNonEnumerable = require( '@stdlib/utils-define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar string2buffer = require( '@stdlib/buffer-from-string' );\nvar Buffer = require( '@stdlib/buffer-ctor' ); // TODO: replace Buffer.concat usage with stdlib pkg\nvar nextTick = require( '@stdlib/utils-next-tick' );\nvar format = require( '@stdlib/string-format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nfunction read() {\n\t/* eslint-disable no-invalid-this */\n\tvar FLG;\n\tvar err;\n\tvar v;\n\n\tif ( this._destroyed ) {\n\t\treturn;\n\t}\n\tFLG = true;\n\twhile ( FLG ) {\n\t\tv = this._iterator.next();\n\t\tthis._i += 1;\n\t\tif ( v.done ) {\n\t\t\tif ( hasOwnProp( v, 'value' ) ) {\n\t\t\t\tv = v.value;\n\t\t\t\tdebug( 'Value: %s. Iter: %d.', JSON.stringify( v ), this._i );\n\t\t\t\tif ( this._objectMode === false ) {\n\t\t\t\t\tv = this._serialize( v );\n\t\t\t\t\tif ( typeof v === 'string' ) {\n\t\t\t\t\t\tif ( this._i === 1 ) { // eslint-disable-line max-depth\n\t\t\t\t\t\t\tv = string2buffer( v );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tv = string2buffer( this._sep+v );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.push( v );\n\t\t\t\t\t} else if ( isBuffer( v ) ) {\n\t\t\t\t\t\tif ( this._i > 1 ) { // eslint-disable-line max-depth\n\t\t\t\t\t\t\tv = Buffer.concat( [ string2buffer( this._sep ), v ] ); // eslint-disable-line max-len\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.push( v );\n\t\t\t\t\t} else {\n\t\t\t\t\t\terr = new Error( format( 'invalid operation. Serialization function must return a string or Buffer. Value: `%s`.', v ) );\n\t\t\t\t\t\tthis.emit( 'error', err );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tdebug( 'Finished iteration.' );\n\t\t\treturn this.push( null );\n\t\t}\n\t\tv = v.value;\n\t\tdebug( 'Value: %s. Iter: %d.', JSON.stringify( v ), this._i );\n\n\t\tif ( this._objectMode === false ) {\n\t\t\tv = this._serialize( v );\n\t\t\tif ( typeof v === 'string' ) {\n\t\t\t\tif ( this._i === 1 ) {\n\t\t\t\t\tv = string2buffer( v );\n\t\t\t\t} else {\n\t\t\t\t\tv = string2buffer( this._sep+v );\n\t\t\t\t}\n\t\t\t} else if ( isBuffer( v ) ) {\n\t\t\t\tif ( this._i > 1 ) {\n\t\t\t\t\tv = Buffer.concat( [ string2buffer( this._sep ), v ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\terr = new Error( format( 'invalid operation. Serialization function must return a string or Buffer. Value: `%s`.', v ) );\n\t\t\t\tthis.emit( 'error', err );\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tFLG = this.push( v );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {(string|Object|Error)} [error] - error\n* @returns {IteratorStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', ( isError( error ) ) ? error.message : JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Stream constructor for generating a readable stream from an iterator.\n*\n* @constructor\n* @param {Iterator} iterator - source iterator\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether the stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to strings\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before pausing iteration\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {Function} [options.serialize] - custom serialization function\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {IteratorStream} Stream instance\n*\n* @example\n* var inspectStream = require( '@stdlib/streams-node-inspect-sink' );\n* var randu = require( '@stdlib/random-iter-randu' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = new IteratorStream( randu( opts ) );\n*\n* stream.pipe( inspectStream( log )  );\n*/\nfunction IteratorStream( iterator, options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof IteratorStream ) ) {\n\t\tif ( arguments.length > 1 ) {\n\t\t\treturn new IteratorStream( iterator, options );\n\t\t}\n\t\treturn new IteratorStream( iterator );\n\t}\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an iterator. Value: `%s`.', iterator ) );\n\t}\n\topts = copy( DEFAULTS );\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make the stream a readable stream:\n\tdebug( 'Creating a readable stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tReadable.call( this, opts );\n\n\t// Destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache whether the stream is operating in object mode:\n\tsetNonEnumerableReadOnly( this, '_objectMode', opts.objectMode );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', opts.sep );\n\n\t// Define the serialization function:\n\tsetNonEnumerableReadOnly( this, '_serialize', opts.serialize || JSON.stringify );\n\n\t// Cache the iterator:\n\tsetNonEnumerableReadOnly( this, '_iterator', iterator );\n\n\t// Initialize an iteration counter:\n\tsetNonEnumerable( this, '_i', 0 );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Readable` prototype.\n*/\ninherit( IteratorStream, Readable );\n\n/**\n* Implements the `_read` method.\n*\n* @private\n* @name _read\n* @memberof IteratorStream.prototype\n* @type {Function}\n* @param {number} size - number (of bytes) to read\n* @returns {void}\n*/\nsetNonEnumerableReadOnly( IteratorStream.prototype, '_read', read );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof IteratorStream.prototype\n* @type {Function}\n* @param {(string|Object|Error)} [error] - error\n* @returns {IteratorStream} Stream instance\n*/\nsetNonEnumerableReadOnly( IteratorStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = IteratorStream;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar format = require( '@stdlib/string-format' );\nvar copy = require( '@stdlib/utils-copy' );\nvar IteratorStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns an \"objectMode\" readable stream from an iterator.\n*\n* @param {Iterator} iterator - source iterator\n* @param {Options} [options] - stream options\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of objects to store in an internal buffer before pausing iteration\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {IteratorStream} Stream instance\n*\n* @example\n* var randu = require( '@stdlib/random-iter-randu' );\n* var inspectStream = require( '@stdlib/streams-node-inspect-sink' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = objectMode( randu( opts ) );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\nfunction objectMode( iterator, options ) {\n\tvar opts;\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\topts = copy( options, 1 );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new IteratorStream( iterator, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar copy = require( '@stdlib/utils-copy' );\nvar IteratorStream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating readable streams from iterators.\n*\n* @param {Options} [options] - stream options\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the maximum number of bytes to store in an internal buffer before pausing iteration\n* @param {string} [options.sep='\\n'] - separator used to join streamed data\n* @param {Function} [options.serialize] - custom serialization function\n* @returns {Function} stream factory\n*\n* @example\n* var randu = require( '@stdlib/random-iter-randu' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( randu() ) );\n* }\n*/\nfunction factory( options ) {\n\tvar opts;\n\tif ( arguments.length ) {\n\t\topts = copy( options, 1 );\n\t} else {\n\t\topts = {};\n\t}\n\treturn createStream;\n\n\t/**\n\t* Returns a readable stream from an iterator.\n\t*\n\t* @private\n\t* @param {Iterator} iterator - source iterator\n\t* @throws {TypeError} must provide an iterator\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {IteratorStream} Stream instance\n\t*/\n\tfunction createStream( iterator ) {\n\t\treturn new IteratorStream( iterator, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a readable stream from an iterator.\n*\n* @module @stdlib/streams-node-from-iterator\n*\n* @example\n* var inspectStream = require( '@stdlib/streams-node-inspect-sink' );\n* var randu = require( '@stdlib/random-iter-randu' );\n* var iteratorStream = require( '@stdlib/streams-node-from-iterator' );\n*\n* function log( chunk ) {\n*    console.log( chunk.toString() );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = iteratorStream( randu( opts ) );\n*\n* stream.pipe( inspectStream( log ) );\n*\n* @example\n* var randu = require( '@stdlib/random-iter-randu' );\n* var iteratorStream = require( '@stdlib/streams-node-from-iterator' );\n*\n* var opts = {\n*     'sep': ',',\n*     'objectMode': false,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var createStream = iteratorStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( createStream( randu() ) );\n* }\n*\n* @example\n* var inspectStream = require( '@stdlib/streams-node-inspect-sink' );\n* var randu = require( '@stdlib/random-iter-randu' );\n* var iteratorStream = require( '@stdlib/streams-node-from-iterator' );\n*\n* function log( v ) {\n*    console.log( v );\n* }\n*\n* var opts = {\n*     'iter': 10\n* };\n*\n* var stream = iteratorStream.objectMode( randu( opts ) );\n*\n* stream.pipe( inspectStream.objectMode( log ) );\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar stream = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( stream, 'objectMode', objectMode );\nsetReadOnly( stream, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = stream;\n"],"names":["Stream","require","process","env","READABLE_STREAM","module","exports","Readable","Writable","Duplex","Transform","PassThrough","isObject","require$$0","hasOwnProp","require$$1","isBoolean","require$$2","isPrimitive","isNonNegative","require$$3","isString","require$$4","isFunction","require$$5","format","require$$6","validate_1","opts","options","sep","TypeError","objectMode","encoding","highWaterMark","serialize","type","debug_1","logger","isIteratorLike","isError","isBuffer","copy","setNonEnumerable","require$$7","setNonEnumerableReadOnly","require$$8","string2buffer","require$$9","Buffer","require$$10","nextTick","require$$11","require$$12","DEFAULTS","require$$13","validate","require$$14","debug","require$$15","IteratorStream","iterator","err","this","arguments","length","JSON","stringify","call","prototype","FLG","v","_destroyed","_iterator","next","_i","done","value","_objectMode","_serialize","_sep","push","concat","Error","emit","error","self","message","setReadOnly","stream","factory","createStream","lib"],"mappings":"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"}